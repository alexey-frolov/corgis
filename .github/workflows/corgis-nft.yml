name: Corgis NFT contract&app CI/CD

on:
  # We want to trigger the build & test pipelines in every branch.
  # This will help us to detect errors earlier in the development process.
  push:
    # But do no run the pipeline when only `md` files are modified.
    paths-ignore:
      - '**.md'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:

  build-contract:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Cache cargo
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          contract/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
    - name: Install Rust target wasm32 to compile for the NEAR platform
      run: rustup target add wasm32-unknown-unknown
      
    - name: Build the Rust Corgis contract
      run: yarn build:contract

    - name: Upload corgis_nft wasm contract
      uses: actions/upload-artifact@v2
      with:
        name: corgis_nft
        path: contract/target/wasm32-unknown-unknown/release/corgis_nft.wasm
        retention-days: 1

  test-contract:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Cache cargo
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          contract/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run Rust Corgis contract unit tests
      run: yarn test:contract

  api-test-contract:
    needs: build-contract
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Cache yarn
      uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Cache node_modules
      uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
    
    - name: Download corgis_nft wasm contract
      uses: actions/download-artifact@v2
      with:
        name: corgis_nft
        path: contract/target/wasm32-unknown-unknown/release

    - name: Install yarn dependencies to install near-cli
      run: yarn install --frozen-lockfile

    # For more information, take a look at https://github.com/near/near-cli/blob/master/utils/eventtracking.js
    - name: Disable near-cli event tracking consent question (which blocks the CI pipeline)
      run: "mkdir $HOME/.near-config && echo '{\"trackingEnabled\": false, \"trackingAccountID\": false}' > $HOME/.near-config/settings.json"
                
    - name: Deploy the Rust Corgis contract to testnet using a dev account
      run: yarn dev-deploy:contract
      
    - name: Run API tests for the Rust Corgis contract against testnet using the dev account
      run: yarn api-test:contract

  deploy:
    needs: api-test-contract
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Cache yarn
      uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Cache node_modules
      uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
            
    - name: Download corgis_nft wasm contract
      uses: actions/download-artifact@v2
      with:
        name: corgis_nft
        path: contract/target/wasm32-unknown-unknown/release

    - name: Install yarn dependencies
      run: yarn install --frozen-lockfile

    # For more information, take a look at https://github.com/near/near-cli/blob/master/utils/eventtracking.js
    - name: Disable near-cli event tracking consent question (which block the CI pipeline)
      run: "mkdir $HOME/.near-config && echo '{\"trackingEnabled\": false, \"trackingAccountID\": false}' > $HOME/.near-config/settings.json"
    
    - name: Create brand new account (sub-account of master account) to be used by gh-pages (only in master)
      run: |
        yarn near generate-key $MASTER_ACCOUNT --seedPhrase="$seed_phrase"
        yarn near create-account sha-$GITHUB_SHA.$MASTER_ACCOUNT --masterAccount $MASTER_ACCOUNT --initialBalance 5
      env:
        MASTER_ACCOUNT: corgis-nft.testnet
        seed_phrase: ${{ secrets.SEED_PHRASE }}
      if: ${{ github.ref == 'refs/heads/master' }}
      
    - name: Deploy the Rust Corgis contract to testnet and push the React app to gh-pages (only in master)
      run: |
        git remote set-url origin https://git:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
        yarn gh-pages-clean
        yarn deploy --user "Github Workflow Bot <noemail@epam.github.io>"
      env:
        CONTRACT_NAME: sha-${{ github.sha }}.corgis-nft.testnet
        #CONTRACT_NAME: corgis-nft.testnet
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: ${{ github.ref == 'refs/heads/master' }}
